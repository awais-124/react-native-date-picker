diff --git a/android/src/main/java/com/henninghall/date_picker/generated/NumberPicker.java b/android/src/main/java/com/henninghall/date_picker/generated/NumberPicker.java
index e600b4f..0a262b5 100644
--- a/android/src/main/java/com/henninghall/date_picker/generated/NumberPicker.java
+++ b/android/src/main/java/com/henninghall/date_picker/generated/NumberPicker.java
@@ -14,17 +14,9 @@
  * limitations under the License.
  */
 
-package android.widget;
-
-import android.annotation.CallSuper;
-import android.annotation.ColorInt;
-import android.annotation.FloatRange;
-import android.annotation.IntDef;
-import android.annotation.IntRange;
-import android.annotation.Px;
-import android.annotation.TestApi;
-import android.annotation.Widget;
-import android.compat.annotation.UnsupportedAppUsage;
+package com.henninghall.date_picker.generated;
+
+
 import android.content.Context;
 import android.content.res.ColorStateList;
 import android.content.res.TypedArray;
@@ -53,14 +45,26 @@ import android.view.VelocityTracker;
 import android.view.View;
 import android.view.ViewConfiguration;
 import android.view.accessibility.AccessibilityEvent;
-import android.view.accessibility.AccessibilityManager;
 import android.view.accessibility.AccessibilityNodeInfo;
 import android.view.accessibility.AccessibilityNodeProvider;
 import android.view.animation.DecelerateInterpolator;
 import android.view.inputmethod.EditorInfo;
 import android.view.inputmethod.InputMethodManager;
-
-import com.android.internal.R;
+import android.widget.Button;
+import android.widget.EditText;
+import android.widget.ImageButton;
+import android.widget.LinearLayout;
+import android.widget.Scroller;
+import android.widget.TextView;
+
+import androidx.annotation.CallSuper;
+import androidx.annotation.ColorInt;
+import androidx.annotation.FloatRange;
+import androidx.annotation.IntDef;
+import androidx.annotation.IntRange;
+import androidx.annotation.Px;
+
+import com.henninghall.date_picker.R;
 
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
@@ -107,13 +111,11 @@ import java.util.Locale;
  * For an example of using this widget, see {@link android.widget.TimePicker}.
  * </p>
  */
-@Widget
 public class NumberPicker extends LinearLayout {
 
     /**
      * The number of items show in the selector wheel.
      */
-    @UnsupportedAppUsage
     private static final int SELECTOR_WHEEL_ITEM_COUNT = 3;
 
     /**
@@ -124,13 +126,12 @@ public class NumberPicker extends LinearLayout {
     /**
      * The index of the middle selector item.
      */
-    @UnsupportedAppUsage
     private static final int SELECTOR_MIDDLE_ITEM_INDEX = SELECTOR_WHEEL_ITEM_COUNT / 2;
 
     /**
      * The coefficient by which to adjust (divide) the max fling velocity.
      */
-    private static final int SELECTOR_MAX_FLING_VELOCITY_ADJUSTMENT = 8;
+    private static final int SELECTOR_MAX_FLING_VELOCITY_ADJUSTMENT = 1;
 
     /**
      * The the duration for adjusting the selector wheel.
@@ -157,11 +158,6 @@ public class NumberPicker extends LinearLayout {
      */
     private static final int UNSCALED_DEFAULT_SELECTION_DIVIDERS_DISTANCE = 48;
 
-    /**
-     * The resource id for the default layout.
-     */
-    private static final int DEFAULT_LAYOUT_RESOURCE_ID = R.layout.number_picker;
-
     /**
      * Constant for unspecified size.
      */
@@ -208,7 +204,10 @@ public class NumberPicker extends LinearLayout {
         }
 
         private static char getZeroDigit(Locale locale) {
-            return DecimalFormatSymbols.getInstance(locale).getZeroDigit();
+            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {
+                return DecimalFormatSymbols.getInstance(locale).getZeroDigit();
+            }
+            return '0';
         }
 
         private java.util.Formatter createFormatter(Locale locale) {
@@ -221,7 +220,6 @@ public class NumberPicker extends LinearLayout {
     /**
      * @hide
      */
-    @UnsupportedAppUsage
     public static final Formatter getTwoDigitFormatter() {
         return sTwoDigitFormatter;
     }
@@ -239,7 +237,6 @@ public class NumberPicker extends LinearLayout {
     /**
      * The text for showing the current value.
      */
-    @UnsupportedAppUsage
     private final EditText mInputText;
 
     /**
@@ -250,7 +247,6 @@ public class NumberPicker extends LinearLayout {
     /**
      * The min height of this widget.
      */
-    @UnsupportedAppUsage(maxTargetSdk = Build.VERSION_CODES.R, trackingBug = 170729553)
     private final int mMinHeight;
 
     /**
@@ -261,7 +257,6 @@ public class NumberPicker extends LinearLayout {
     /**
      * The max width of this widget.
      */
-    @UnsupportedAppUsage(maxTargetSdk = Build.VERSION_CODES.R, trackingBug = 170729553)
     private final int mMinWidth;
 
     /**
@@ -277,7 +272,6 @@ public class NumberPicker extends LinearLayout {
     /**
      * The height of the text.
      */
-    @UnsupportedAppUsage(maxTargetSdk = Build.VERSION_CODES.R, trackingBug = 170729553)
     private final int mTextSize;
 
     /**
@@ -298,7 +292,6 @@ public class NumberPicker extends LinearLayout {
     /**
      * Upper value of the range of numbers allowed for the NumberPicker
      */
-    @UnsupportedAppUsage(maxTargetSdk = Build.VERSION_CODES.R, trackingBug = 170729553)
     private int mMaxValue;
 
     /**
@@ -309,7 +302,6 @@ public class NumberPicker extends LinearLayout {
     /**
      * Listener to be notified upon current value change.
      */
-    @UnsupportedAppUsage(maxTargetSdk = Build.VERSION_CODES.R, trackingBug = 170729553)
     private OnValueChangeListener mOnValueChangeListener;
 
     /**
@@ -335,13 +327,11 @@ public class NumberPicker extends LinearLayout {
     /**
      * The selector indices whose value are show by the selector.
      */
-    @UnsupportedAppUsage
     private final int[] mSelectorIndices = new int[SELECTOR_WHEEL_ITEM_COUNT];
 
     /**
      * The {@link Paint} for drawing the selector.
      */
-    @UnsupportedAppUsage(maxTargetSdk = Build.VERSION_CODES.P)
     private final Paint mSelectorWheelPaint;
 
     /**
@@ -367,7 +357,6 @@ public class NumberPicker extends LinearLayout {
     /**
      * The {@link Scroller} responsible for flinging the selector.
      */
-    @UnsupportedAppUsage(maxTargetSdk = Build.VERSION_CODES.R, trackingBug = 170729553)
     private final Scroller mFlingScroller;
 
     /**
@@ -429,7 +418,6 @@ public class NumberPicker extends LinearLayout {
     /**
      * @see ViewConfiguration#getScaledMaximumFlingVelocity()
      */
-    @UnsupportedAppUsage(maxTargetSdk = Build.VERSION_CODES.R, trackingBug = 170729553)
     private int mMaximumFlingVelocity;
 
     /**
@@ -450,13 +438,11 @@ public class NumberPicker extends LinearLayout {
     /**
      * Divider for showing item to be selected while scrolling
      */
-    @UnsupportedAppUsage(maxTargetSdk = Build.VERSION_CODES.P)
     private final Drawable mSelectionDivider;
 
     /**
      * The height of the selection divider.
      */
-    @UnsupportedAppUsage(maxTargetSdk = Build.VERSION_CODES.P)
     private int mSelectionDividerHeight;
 
     /**
@@ -540,7 +526,7 @@ public class NumberPicker extends LinearLayout {
      */
     public interface OnScrollListener {
         /** @hide */
-        @IntDef(prefix = { "SCROLL_STATE_" }, value = {
+        @IntDef(value = {
                 SCROLL_STATE_IDLE,
                 SCROLL_STATE_TOUCH_SCROLL,
                 SCROLL_STATE_FLING
@@ -605,7 +591,7 @@ public class NumberPicker extends LinearLayout {
      * @param attrs A collection of attributes.
      */
     public NumberPicker(Context context, AttributeSet attrs) {
-        this(context, attrs, R.attr.numberPickerStyle);
+        this(context, attrs, android.R.attr.numberPickerStyle);
     }
 
     /**
@@ -640,23 +626,28 @@ public class NumberPicker extends LinearLayout {
         // process style attributes
         final TypedArray attributesArray = context.obtainStyledAttributes(
                 attrs, R.styleable.NumberPicker, defStyleAttr, defStyleRes);
-        saveAttributeDataForStyleable(context, R.styleable.NumberPicker,
-                attrs, attributesArray, defStyleAttr, defStyleRes);
-        final int layoutResId = attributesArray.getResourceId(
-                R.styleable.NumberPicker_internalLayout, DEFAULT_LAYOUT_RESOURCE_ID);
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
+            saveAttributeDataForStyleable(context, R.styleable.NumberPicker,
+                    attrs, attributesArray, defStyleAttr, defStyleRes);
+        }
+
+        final int layoutResId = R.layout.number_picker_material;
+
 
         mHasSelectorWheel = (layoutResId != DEFAULT_LAYOUT_RESOURCE_ID);
 
         mHideWheelUntilFocused = attributesArray.getBoolean(
-            R.styleable.NumberPicker_hideWheelUntilFocused, false);
+                R.styleable.NumberPicker_hideWheelUntilFocused, false);
 
         mSolidColor = attributesArray.getColor(R.styleable.NumberPicker_solidColor, 0);
 
-        final Drawable selectionDivider = attributesArray.getDrawable(
-                R.styleable.NumberPicker_selectionDivider);
+        Drawable selectionDivider = getResources().getDrawable(R.drawable.number_picker_divider_material);
+
         if (selectionDivider != null) {
             selectionDivider.setCallback(this);
-            selectionDivider.setLayoutDirection(getLayoutDirection());
+            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
+                selectionDivider.setLayoutDirection(getLayoutDirection());
+            }
             if (selectionDivider.isStateful()) {
                 selectionDivider.setState(getDrawableState());
             }
@@ -711,6 +702,7 @@ public class NumberPicker extends LinearLayout {
         // draw() method to be called. Therefore, we declare we will draw.
         setWillNotDraw(!mHasSelectorWheel);
 
+
         LayoutInflater inflater = (LayoutInflater) getContext().getSystemService(
                 Context.LAYOUT_INFLATER_SERVICE);
         inflater.inflate(layoutResId, this, true);
@@ -771,7 +763,7 @@ public class NumberPicker extends LinearLayout {
             }
         });
         mInputText.setFilters(new InputFilter[] {
-            new InputTextFilter()
+                new InputTextFilter()
         });
 
         mInputText.setRawInputType(InputType.TYPE_CLASS_NUMBER);
@@ -808,9 +800,11 @@ public class NumberPicker extends LinearLayout {
         }
 
         // Should be focusable by default, as the text view whose visibility changes is focusable
-        if (getFocusable() == View.FOCUSABLE_AUTO) {
-            setFocusable(View.FOCUSABLE);
-            setFocusableInTouchMode(true);
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
+            if (getFocusable() == View.FOCUSABLE_AUTO) {
+                setFocusable(View.FOCUSABLE);
+                setFocusableInTouchMode(true);
+            }
         }
     }
 
@@ -1081,7 +1075,7 @@ public class NumberPicker extends LinearLayout {
         if (!mHasSelectorWheel) {
             return super.dispatchHoverEvent(event);
         }
-        if (AccessibilityManager.getInstance(mContext).isEnabled()) {
+        if (AccessibilityManager.getInstance(getContext()).isEnabled()) {
             final int eventY = (int) event.getY();
             final int hoveredVirtualViewId;
             if (eventY < mTopSelectionDividerTop) {
@@ -1093,7 +1087,7 @@ public class NumberPicker extends LinearLayout {
             }
             final int action = event.getActionMasked();
             AccessibilityNodeProviderImpl provider =
-                (AccessibilityNodeProviderImpl) getAccessibilityNodeProvider();
+                    (AccessibilityNodeProviderImpl) getAccessibilityNodeProvider();
             switch (action) {
                 case MotionEvent.ACTION_HOVER_ENTER: {
                     provider.sendAccessibilityEventForVirtualView(hoveredVirtualViewId,
@@ -1312,7 +1306,10 @@ public class NumberPicker extends LinearLayout {
      */
     private void showSoftInput() {
         InputMethodManager inputMethodManager =
-                getContext().getSystemService(InputMethodManager.class);
+                null;
+        if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.M) {
+            inputMethodManager = getContext().getSystemService(InputMethodManager.class);
+        }
         if (inputMethodManager != null) {
             if (mHasSelectorWheel) {
                 mInputText.setVisibility(View.VISIBLE);
@@ -1327,9 +1324,12 @@ public class NumberPicker extends LinearLayout {
      */
     private void hideSoftInput() {
         InputMethodManager inputMethodManager =
-                getContext().getSystemService(InputMethodManager.class);
-        if (inputMethodManager != null) {
-            inputMethodManager.hideSoftInputFromView(mInputText, 0);
+                null;
+        if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.M) {
+            inputMethodManager = getContext().getSystemService(InputMethodManager.class);
+        }
+        if (inputMethodManager != null && inputMethodManager.isActive(mInputText)) {
+            inputMethodManager.hideSoftInputFromWindow(getWindowToken(), 0);
         }
         if (mHasSelectorWheel) {
             mInputText.setVisibility(View.INVISIBLE);
@@ -1563,7 +1563,6 @@ public class NumberPicker extends LinearLayout {
      *
      * @hide
      */
-    @TestApi
     public CharSequence getDisplayedValueForCurrentSelection() {
         // The cache field itself is initialized at declaration time, and since it's final, it
         // can't be null here. The cache is updated in ensureCachedScrollSelectorValue which is
@@ -1631,16 +1630,6 @@ public class NumberPicker extends LinearLayout {
         }
     }
 
-    /** @hide */
-    @Override
-    public void onResolveDrawables(@ResolvedLayoutDir int layoutDirection) {
-        super.onResolveDrawables(layoutDirection);
-
-        if (mSelectionDivider != null) {
-            mSelectionDivider.setLayoutDirection(layoutDirection);
-        }
-    }
-
     @Override
     protected void onDraw(Canvas canvas) {
         if (!mHasSelectorWheel) {
@@ -1648,7 +1637,7 @@ public class NumberPicker extends LinearLayout {
             return;
         }
         final boolean showSelectorWheel = mHideWheelUntilFocused ? hasFocus() : true;
-        float x = (mRight - mLeft) / 2;
+        float x = (getRight() - getLeft()) / 2;
         float y = mCurrentScrollOffset;
 
         // draw the virtual buttons pressed state if needed
@@ -1656,13 +1645,13 @@ public class NumberPicker extends LinearLayout {
                 && mScrollState == OnScrollListener.SCROLL_STATE_IDLE) {
             if (mDecrementVirtualButtonPressed) {
                 mVirtualButtonPressedDrawable.setState(PRESSED_STATE_SET);
-                mVirtualButtonPressedDrawable.setBounds(0, 0, mRight, mTopSelectionDividerTop);
+                mVirtualButtonPressedDrawable.setBounds(0, 0, getRight(), mTopSelectionDividerTop);
                 mVirtualButtonPressedDrawable.draw(canvas);
             }
             if (mIncrementVirtualButtonPressed) {
                 mVirtualButtonPressedDrawable.setState(PRESSED_STATE_SET);
-                mVirtualButtonPressedDrawable.setBounds(0, mBottomSelectionDividerBottom, mRight,
-                        mBottom);
+                mVirtualButtonPressedDrawable.setBounds(0, mBottomSelectionDividerBottom, getRight(),
+                        getBottom());
                 mVirtualButtonPressedDrawable.draw(canvas);
             }
         }
@@ -1678,7 +1667,7 @@ public class NumberPicker extends LinearLayout {
             // IME they may see a dimmed version of the old value intermixed
             // with the new one.
             if ((showSelectorWheel && i != SELECTOR_MIDDLE_ITEM_INDEX) ||
-                (i == SELECTOR_MIDDLE_ITEM_INDEX && mInputText.getVisibility() != VISIBLE)) {
+                    (i == SELECTOR_MIDDLE_ITEM_INDEX && mInputText.getVisibility() != VISIBLE)) {
                 canvas.drawText(scrollSelectorValue, x, y, mSelectorWheelPaint);
             }
             y += mSelectorElementHeight;
@@ -1689,26 +1678,17 @@ public class NumberPicker extends LinearLayout {
             // draw the top divider
             int topOfTopDivider = mTopSelectionDividerTop;
             int bottomOfTopDivider = topOfTopDivider + mSelectionDividerHeight;
-            mSelectionDivider.setBounds(0, topOfTopDivider, mRight, bottomOfTopDivider);
+            mSelectionDivider.setBounds(0, topOfTopDivider, getRight(), bottomOfTopDivider);
             mSelectionDivider.draw(canvas);
 
             // draw the bottom divider
             int bottomOfBottomDivider = mBottomSelectionDividerBottom;
             int topOfBottomDivider = bottomOfBottomDivider - mSelectionDividerHeight;
-            mSelectionDivider.setBounds(0, topOfBottomDivider, mRight, bottomOfBottomDivider);
+            mSelectionDivider.setBounds(0, topOfBottomDivider, getRight(), bottomOfBottomDivider);
             mSelectionDivider.draw(canvas);
         }
     }
 
-    /** @hide */
-    @Override
-    public void onInitializeAccessibilityEventInternal(AccessibilityEvent event) {
-        super.onInitializeAccessibilityEventInternal(event);
-        event.setClassName(NumberPicker.class.getName());
-        event.setScrollable(true);
-        event.setScrollY((mMinValue + mValue) * mSelectorElementHeight);
-        event.setMaxScrollY((mMaxValue - mMinValue) * mSelectorElementHeight);
-    }
 
     @Override
     public AccessibilityNodeProvider getAccessibilityNodeProvider() {
@@ -1808,7 +1788,6 @@ public class NumberPicker extends LinearLayout {
      * Resets the selector indices and clear the cached string representation of
      * these indices.
      */
-    @UnsupportedAppUsage
     private void initializeSelectorWheelIndices() {
         mSelectorIndexToStringCache.clear();
         int[] selectorIndices = mSelectorIndices;
@@ -1860,8 +1839,7 @@ public class NumberPicker extends LinearLayout {
      *
      * @param increment True to increment, false to decrement.
      */
-     @UnsupportedAppUsage
-     private void changeValueByOne(boolean increment) {
+    private void changeValueByOne(boolean increment) {
         if (mHasSelectorWheel) {
             hideSoftInput();
             if (!moveToFinalScrollerPosition(mFlingScroller)) {
@@ -1887,7 +1865,7 @@ public class NumberPicker extends LinearLayout {
         initializeSelectorWheelIndices();
         int[] selectorIndices = mSelectorIndices;
         int totalTextHeight = selectorIndices.length * mTextSize;
-        float totalTextGapHeight = (mBottom - mTop) - totalTextHeight;
+        float totalTextGapHeight = (getBottom() - getTop()) - totalTextHeight;
         float textGapCount = selectorIndices.length;
         mSelectorTextGapHeight = (int) (totalTextGapHeight / textGapCount + 0.5f);
         mSelectorElementHeight = mTextSize + mSelectorTextGapHeight;
@@ -1902,7 +1880,7 @@ public class NumberPicker extends LinearLayout {
 
     private void initializeFadingEdges() {
         setVerticalFadingEdgeEnabled(true);
-        setFadingEdgeLength((mBottom - mTop - mTextSize) / 2);
+        setFadingEdgeLength((getBottom() - getTop() - mTextSize) / 2);
     }
 
     /**
@@ -2051,7 +2029,7 @@ public class NumberPicker extends LinearLayout {
             CharSequence beforeText = mInputText.getText();
             if (!text.equals(beforeText.toString())) {
                 mInputText.setText(text);
-                if (AccessibilityManager.getInstance(mContext).isEnabled()) {
+                if (AccessibilityManager.getInstance(getContext()).isEnabled()) {
                     AccessibilityEvent event = AccessibilityEvent.obtain(
                             AccessibilityEvent.TYPE_VIEW_TEXT_CHANGED);
                     mInputText.onInitializeAccessibilityEvent(event);
@@ -2319,11 +2297,11 @@ public class NumberPicker extends LinearLayout {
             NumberPicker.this.removeCallbacks(this);
             if (mIncrementVirtualButtonPressed) {
                 mIncrementVirtualButtonPressed = false;
-                invalidate(0, mBottomSelectionDividerBottom, mRight, mBottom);
+                invalidate(0, mBottomSelectionDividerBottom, getRight(), getBottom());
             }
             mDecrementVirtualButtonPressed = false;
             if (mDecrementVirtualButtonPressed) {
-                invalidate(0, 0, mRight, mTopSelectionDividerTop);
+                invalidate(0, 0, getRight(), mTopSelectionDividerTop);
             }
         }
 
@@ -2348,11 +2326,11 @@ public class NumberPicker extends LinearLayout {
                     switch (mManagedButton) {
                         case BUTTON_INCREMENT: {
                             mIncrementVirtualButtonPressed = true;
-                            invalidate(0, mBottomSelectionDividerBottom, mRight, mBottom);
+                            invalidate(0, mBottomSelectionDividerBottom, getRight(), getBottom());
                         } break;
                         case BUTTON_DECREMENT: {
                             mDecrementVirtualButtonPressed = true;
-                            invalidate(0, 0, mRight, mTopSelectionDividerTop);
+                            invalidate(0, 0, getRight(), mTopSelectionDividerTop);
                         }
                     }
                 } break;
@@ -2364,7 +2342,7 @@ public class NumberPicker extends LinearLayout {
                                         ViewConfiguration.getPressedStateDuration());
                             }
                             mIncrementVirtualButtonPressed ^= true;
-                            invalidate(0, mBottomSelectionDividerBottom, mRight, mBottom);
+                            invalidate(0, mBottomSelectionDividerBottom, getRight(), getBottom());
                         } break;
                         case BUTTON_DECREMENT: {
                             if (!mDecrementVirtualButtonPressed) {
@@ -2372,7 +2350,7 @@ public class NumberPicker extends LinearLayout {
                                         ViewConfiguration.getPressedStateDuration());
                             }
                             mDecrementVirtualButtonPressed ^= true;
-                            invalidate(0, 0, mRight, mTopSelectionDividerTop);
+                            invalidate(0, 0, getRight(), mTopSelectionDividerTop);
                         }
                     }
                 } break;
@@ -2440,7 +2418,7 @@ public class NumberPicker extends LinearLayout {
     /**
      * @hide
      */
-    public static class CustomEditText extends EditText {
+    public static class CustomEditText extends androidx.appcompat.widget.AppCompatEditText {
 
         public CustomEditText(Context context, AttributeSet attrs) {
             super(context, attrs);
@@ -2488,30 +2466,30 @@ public class NumberPicker extends LinearLayout {
         public AccessibilityNodeInfo createAccessibilityNodeInfo(int virtualViewId) {
             switch (virtualViewId) {
                 case View.NO_ID:
-                    return createAccessibilityNodeInfoForNumberPicker( mScrollX, mScrollY,
-                            mScrollX + (mRight - mLeft), mScrollY + (mBottom - mTop));
+                    return createAccessibilityNodeInfoForNumberPicker( getScrollX(), getScrollY(),
+                            getScrollX() + (getRight() - getLeft()), getScrollY() + (getBottom() - getTop()));
                 case VIRTUAL_VIEW_ID_DECREMENT:
                     return createAccessibilityNodeInfoForVirtualButton(VIRTUAL_VIEW_ID_DECREMENT,
-                            getVirtualDecrementButtonText(), mScrollX, mScrollY,
-                            mScrollX + (mRight - mLeft),
+                            getVirtualDecrementButtonText(), getScrollX(), getScrollY(),
+                            getScrollX() + (getRight() - getLeft()),
                             mTopSelectionDividerTop + mSelectionDividerHeight);
                 case VIRTUAL_VIEW_ID_INPUT:
-                    return createAccessibiltyNodeInfoForInputText(mScrollX,
+                    return createAccessibiltyNodeInfoForInputText(getScrollX(),
                             mTopSelectionDividerTop + mSelectionDividerHeight,
-                            mScrollX + (mRight - mLeft),
+                            getScrollX() + (getRight() - getLeft()),
                             mBottomSelectionDividerBottom - mSelectionDividerHeight);
                 case VIRTUAL_VIEW_ID_INCREMENT:
                     return createAccessibilityNodeInfoForVirtualButton(VIRTUAL_VIEW_ID_INCREMENT,
-                            getVirtualIncrementButtonText(), mScrollX,
+                            getVirtualIncrementButtonText(), getScrollX(),
                             mBottomSelectionDividerBottom - mSelectionDividerHeight,
-                            mScrollX + (mRight - mLeft), mScrollY + (mBottom - mTop));
+                            getScrollX() + (getRight() - getLeft()), getScrollY() + (getBottom() - getTop()));
             }
             return super.createAccessibilityNodeInfo(virtualViewId);
         }
 
         @Override
         public List<AccessibilityNodeInfo> findAccessibilityNodeInfosByText(String searched,
-                int virtualViewId) {
+                                                                            int virtualViewId) {
             if (TextUtils.isEmpty(searched)) {
                 return Collections.emptyList();
             }
@@ -2546,20 +2524,20 @@ public class NumberPicker extends LinearLayout {
                         case AccessibilityNodeInfo.ACTION_ACCESSIBILITY_FOCUS: {
                             if (mAccessibilityFocusedView != virtualViewId) {
                                 mAccessibilityFocusedView = virtualViewId;
-                                requestAccessibilityFocus();
+//                                requestAccessibilityFocus();
                                 return true;
                             }
                         } return false;
                         case AccessibilityNodeInfo.ACTION_CLEAR_ACCESSIBILITY_FOCUS: {
                             if (mAccessibilityFocusedView == virtualViewId) {
                                 mAccessibilityFocusedView = UNDEFINED;
-                                clearAccessibilityFocus();
+//                                clearAccessibilityFocus();
                                 return true;
                             }
                             return false;
                         }
                         case AccessibilityNodeInfo.ACTION_SCROLL_FORWARD:
-                        case R.id.accessibilityActionScrollDown: {
+                        case android.R.id.accessibilityActionScrollDown: {
                             if (NumberPicker.this.isEnabled()
                                     && (getWrapSelectorWheel() || getValue() < getMaxValue())) {
                                 changeValueByOne(true);
@@ -2567,7 +2545,7 @@ public class NumberPicker extends LinearLayout {
                             }
                         } return false;
                         case AccessibilityNodeInfo.ACTION_SCROLL_BACKWARD:
-                        case R.id.accessibilityActionScrollUp: {
+                        case android.R.id.accessibilityActionScrollUp: {
                             if (NumberPicker.this.isEnabled()
                                     && (getWrapSelectorWheel() || getValue() > getMinValue())) {
                                 changeValueByOne(false);
@@ -2642,7 +2620,7 @@ public class NumberPicker extends LinearLayout {
                                 mAccessibilityFocusedView = virtualViewId;
                                 sendAccessibilityEventForVirtualView(virtualViewId,
                                         AccessibilityEvent.TYPE_VIEW_ACCESSIBILITY_FOCUSED);
-                                invalidate(0, mBottomSelectionDividerBottom, mRight, mBottom);
+                                invalidate(0, mBottomSelectionDividerBottom, getRight(), getBottom());
                                 return true;
                             }
                         } return false;
@@ -2651,7 +2629,7 @@ public class NumberPicker extends LinearLayout {
                                 mAccessibilityFocusedView = UNDEFINED;
                                 sendAccessibilityEventForVirtualView(virtualViewId,
                                         AccessibilityEvent.TYPE_VIEW_ACCESSIBILITY_FOCUS_CLEARED);
-                                invalidate(0, mBottomSelectionDividerBottom, mRight, mBottom);
+                                invalidate(0, mBottomSelectionDividerBottom, getRight(), getBottom());
                                 return true;
                             }
                         } return false;
@@ -2673,7 +2651,7 @@ public class NumberPicker extends LinearLayout {
                                 mAccessibilityFocusedView = virtualViewId;
                                 sendAccessibilityEventForVirtualView(virtualViewId,
                                         AccessibilityEvent.TYPE_VIEW_ACCESSIBILITY_FOCUSED);
-                                invalidate(0, 0, mRight, mTopSelectionDividerTop);
+                                invalidate(0, 0, getRight(), mTopSelectionDividerTop);
                                 return true;
                             }
                         } return false;
@@ -2682,7 +2660,7 @@ public class NumberPicker extends LinearLayout {
                                 mAccessibilityFocusedView = UNDEFINED;
                                 sendAccessibilityEventForVirtualView(virtualViewId,
                                         AccessibilityEvent.TYPE_VIEW_ACCESSIBILITY_FOCUS_CLEARED);
-                                invalidate(0, 0, mRight, mTopSelectionDividerTop);
+                                invalidate(0, 0, getRight(), mTopSelectionDividerTop);
                                 return true;
                             }
                         } return false;
@@ -2713,7 +2691,7 @@ public class NumberPicker extends LinearLayout {
         }
 
         private void sendAccessibilityEventForVirtualText(int eventType) {
-            if (AccessibilityManager.getInstance(mContext).isEnabled()) {
+            if (AccessibilityManager.getInstance(getContext()).isEnabled()) {
                 AccessibilityEvent event = AccessibilityEvent.obtain(eventType);
                 mInputText.onInitializeAccessibilityEvent(event);
                 mInputText.onPopulateAccessibilityEvent(event);
@@ -2723,11 +2701,11 @@ public class NumberPicker extends LinearLayout {
         }
 
         private void sendAccessibilityEventForVirtualButton(int virtualViewId, int eventType,
-                String text) {
-            if (AccessibilityManager.getInstance(mContext).isEnabled()) {
+                                                            String text) {
+            if (AccessibilityManager.getInstance(getContext()).isEnabled()) {
                 AccessibilityEvent event = AccessibilityEvent.obtain(eventType);
                 event.setClassName(Button.class.getName());
-                event.setPackageName(mContext.getPackageName());
+                event.setPackageName(getContext().getPackageName());
                 event.getText().add(text);
                 event.setEnabled(NumberPicker.this.isEnabled());
                 event.setSource(NumberPicker.this, virtualViewId);
@@ -2736,7 +2714,7 @@ public class NumberPicker extends LinearLayout {
         }
 
         private void findAccessibilityNodeInfosByTextInChild(String searchedLowerCase,
-                int virtualViewId, List<AccessibilityNodeInfo> outResult) {
+                                                             int virtualViewId, List<AccessibilityNodeInfo> outResult) {
             switch (virtualViewId) {
                 case VIRTUAL_VIEW_ID_DECREMENT: {
                     String text = getVirtualDecrementButtonText();
@@ -2782,7 +2760,7 @@ public class NumberPicker extends LinearLayout {
             }
             Rect boundsInParent = mTempRect;
             boundsInParent.set(left, top, right, bottom);
-            info.setVisibleToUser(isVisibleToUser(boundsInParent));
+//            info.setVisibleToUser(isVisibleToUser(boundsInParent));
             info.setBoundsInParent(boundsInParent);
             Rect boundsInScreen = boundsInParent;
             int[] locationOnScreen = mTempArray;
@@ -2793,10 +2771,10 @@ public class NumberPicker extends LinearLayout {
         }
 
         private AccessibilityNodeInfo createAccessibilityNodeInfoForVirtualButton(int virtualViewId,
-                String text, int left, int top, int right, int bottom) {
+                                                                                  String text, int left, int top, int right, int bottom) {
             AccessibilityNodeInfo info = AccessibilityNodeInfo.obtain();
             info.setClassName(Button.class.getName());
-            info.setPackageName(mContext.getPackageName());
+            info.setPackageName(getContext().getPackageName());
             info.setSource(NumberPicker.this, virtualViewId);
             info.setParent(NumberPicker.this);
             info.setText(text);
@@ -2806,7 +2784,7 @@ public class NumberPicker extends LinearLayout {
             info.setAccessibilityFocused(mAccessibilityFocusedView == virtualViewId);
             Rect boundsInParent = mTempRect;
             boundsInParent.set(left, top, right, bottom);
-            info.setVisibleToUser(isVisibleToUser(boundsInParent));
+//            info.setVisibleToUser(isVisibleToUser(boundsInParent));
             info.setBoundsInParent(boundsInParent);
             Rect boundsInScreen = boundsInParent;
             int[] locationOnScreen = mTempArray;
@@ -2828,10 +2806,10 @@ public class NumberPicker extends LinearLayout {
         }
 
         private AccessibilityNodeInfo createAccessibilityNodeInfoForNumberPicker(int left, int top,
-                int right, int bottom) {
+                                                                                 int right, int bottom) {
             AccessibilityNodeInfo info = AccessibilityNodeInfo.obtain();
             info.setClassName(NumberPicker.class.getName());
-            info.setPackageName(mContext.getPackageName());
+            info.setPackageName(getContext().getPackageName());
             info.setSource(NumberPicker.this);
 
             if (hasVirtualDecrementButton()) {
@@ -2847,21 +2825,21 @@ public class NumberPicker extends LinearLayout {
             info.setScrollable(true);
             info.setAccessibilityFocused(mAccessibilityFocusedView == View.NO_ID);
 
-            final float applicationScale =
-                getContext().getResources().getCompatibilityInfo().applicationScale;
+//            final float applicationScale =
+//                    getContext().getResources().getCompatibilityInfo().applicationScale;
 
             Rect boundsInParent = mTempRect;
             boundsInParent.set(left, top, right, bottom);
-            boundsInParent.scale(applicationScale);
+//            boundsInParent.scale(applicationScale);
             info.setBoundsInParent(boundsInParent);
 
-            info.setVisibleToUser(isVisibleToUser());
+//            info.setVisibleToUser(isVisibleToUser());
 
             Rect boundsInScreen = boundsInParent;
             int[] locationOnScreen = mTempArray;
             getLocationOnScreen(locationOnScreen);
             boundsInScreen.offset(locationOnScreen[0], locationOnScreen[1]);
-            boundsInScreen.scale(applicationScale);
+//            boundsInScreen.scale(applicationScale);
             info.setBoundsInScreen(boundsInScreen);
 
             if (mAccessibilityFocusedView != View.NO_ID) {
@@ -2922,3 +2900,11 @@ public class NumberPicker extends LinearLayout {
         return String.format(Locale.getDefault(), "%d", value);
     }
 }
+
+class AccessibilityManager {
+    public static android.view.accessibility.AccessibilityManager getInstance(Context context){
+        android.view.accessibility.AccessibilityManager accessibilityManager =
+                (android.view.accessibility.AccessibilityManager) context.getSystemService(Context.ACCESSIBILITY_SERVICE);
+        return accessibilityManager;
+    }
+}
\ No newline at end of file
